import CategoryTheory.Set

class Category.{v} (Œ± : Type u) : Type (max u v) where
  Hom : Œ± ‚Üí Œ± ‚Üí Sort v
  id (A : Œ±) : Hom A A
  comp {A B C : Œ±} : Hom B C ‚Üí Hom A B ‚Üí Hom A C
  id_comp' {A B : Œ±} (f : Hom A B) : comp (id B) f = f
  comp_id' {A B : Œ±} (f : Hom A B) : comp f (id A) = f
  assoc' {A B C D : Œ±} (h : Hom C D) (g : Hom B C) (f : Hom A B) :
    comp (comp h g) f = comp h (comp g f)

namespace Category

scoped infixr:10 " ‚ü∂ " => Category.Hom
scoped infixr:90 " ‚àò " => Category.comp
scoped notation "ùüô" => Category.id

variable {Œ± Œ≤ Œ≥ Œ¥ : Type _} {A B C D : Œ±}
  [Category Œ±] [Category Œ≤] [Category Œ≥] [Category Œ¥]

@[simp]
theorem comp_id (f : A ‚ü∂ B) :
    f ‚àò ùüô A = f :=
  comp_id' f

@[simp]
theorem id_comp (f : A ‚ü∂ B) :
    ùüô B ‚àò f = f :=
  id_comp' f

@[simp]
theorem assoc (h : C ‚ü∂ D) (g : B ‚ü∂ C) (f : A ‚ü∂ B) :
    (h ‚àò g) ‚àò f = h ‚àò g ‚àò f :=
  assoc' h g f

theorem whisker_eq (h : B ‚ü∂ C) {f g : A ‚ü∂ B} (w : f = g) :
    h ‚àò f = h ‚àò g :=
  by rw [w]

theorem eq_whisker {f g : B ‚ü∂ C} (w : f = g) (h : A ‚ü∂ B) :
    f ‚àò h = g ‚àò h :=
  by rw [w]

instance : Category (Type _) where
  Hom Œ± Œ≤ := Œ± ‚Üí Œ≤
  id _ := fun x => x
  comp f g := fun x => f (g x)
  id_comp' _ := rfl
  comp_id' _ := rfl
  assoc' _ _ _ := rfl

structure Opposite (Œ± : Sort u) :=
  unop : Œ±

namespace Opposite

scoped notation:max Œ± "·µí·µñ" => Opposite Œ±

def op (x : Œ±) : Œ±·µí·µñ := ‚ü®x‚ü©

instance [Category Œ±] : Category Œ±·µí·µñ where
  Hom Œ± Œ≤ := unop Œ≤ ‚ü∂ unop Œ±
  id Œ± := ùüô (unop Œ±)
  comp f g := g ‚àò f
  id_comp' f := comp_id f
  comp_id' f := id_comp f
  assoc' h g f := (assoc f g h).symm

end Opposite

open Opposite

@[ext]
structure Functor (Œ± Œ≤ : Type _) [Category Œ±] [Category Œ≤] where
  obj : Œ± ‚Üí Œ≤
  map {A B : Œ±} : (A ‚ü∂ B) ‚Üí (obj A ‚ü∂ obj B)
  map_id {A : Œ±} : map (ùüô A) = ùüô (obj A)
  map_comp {A B C : Œ±} (g : B ‚ü∂ C) (f : A ‚ü∂ B) : map (g ‚àò f) = map g ‚àò map f

attribute [simp] Functor.map_id Functor.map_comp

scoped infixr:26 " ‚•§ " => Functor

/-- The covariant powerset functor. -/
def Power : Type u ‚•§ Type u where
  obj A := Set A
  map := Set.image
  map_id := by
    intro A
    funext S
    exact Set.image_id S
  map_comp := by
    intro A B C g f
    funext S
    exact Set.image_comp g f S

/-- The contravariant powerset functor. -/
def CoPower : (Type u)·µí·µñ ‚•§ Type u where
  obj A := Set (unop A)
  map := Set.preimage
  map_id := rfl
  map_comp _ _ := rfl

def Functor.id (Œ± : Type _) [Category Œ±] : Œ± ‚•§ Œ± where
  obj A := A
  map f := f
  map_id := by simp
  map_comp := by simp

scoped notation "ùü≠" => Functor.id

def Functor.comp (G : Œ≤ ‚•§ Œ≥) (F : Œ± ‚•§ Œ≤) : Œ± ‚•§ Œ≥ where
  obj A := G.obj (F.obj A)
  map f := G.map (F.map f)
  map_id := by simp
  map_comp := by simp

scoped infixr:80 " ‚óå " => Functor.comp

@[simp]
theorem Functor.id_comp (F : Œ± ‚•§ Œ≤) : ùü≠ Œ≤ ‚óå F = F :=
  by aesop

@[simp]
theorem Functor.comp_id (F : Œ± ‚•§ Œ≤) : F ‚óå ùü≠ Œ± = F :=
  by aesop

@[simp]
theorem Functor.comp_assoc (H : Œ≥ ‚•§ Œ¥) (G : Œ≤ ‚•§ Œ≥) (F : Œ± ‚•§ Œ≤) :
    (H ‚óå G) ‚óå F = H ‚óå G ‚óå F :=
  by aesop

structure Bundled (c : Type u ‚Üí Type v) : Type max (u + 1) v where
  Œ± : Type u
  str : c Œ± := by infer_instance

namespace Bundled

attribute [coe] Œ±

set_option checkBinderAnnotations false in
def of {c : Type u ‚Üí Type v} (Œ± : Type u) [str : c Œ±] : Bundled c :=
  ‚ü®Œ±, str‚ü©

instance coeSort : CoeSort (Bundled c) (Type u) :=
  ‚ü®Bundled.Œ±‚ü©

theorem coe_mk (Œ±) (str) : (@Bundled.mk c Œ± str : Type u) = Œ± :=
  rfl

def map (f : ‚àÄ {Œ±}, c Œ± ‚Üí d Œ±) (b : Bundled c) : Bundled d :=
  ‚ü®b, f b.str‚ü©

end Bundled

abbrev Cat.{v, u} := Bundled Category.{v, u}

instance : Coe Cat.{v, u} (Type u) where
  coe := Bundled.Œ±

instance (Œ± : Cat.{v, u}) : Category.{v, u} Œ± :=
  Œ±.str

instance : Category (Cat.{v, u}) where
  Hom Œ± Œ≤ := Œ± ‚•§ Œ≤
  id Œ± := ùü≠ Œ±
  comp G F := G ‚óå F
  id_comp' := by simp
  comp_id' := by simp
  assoc' := by simp

def Functor.opposite (F : Œ± ‚•§ Œ≤) : Œ±·µí·µñ ‚•§ Œ≤·µí·µñ where
  obj A := op (F.obj A.unop)
  map f := F.map f
  map_id := F.map_id
  map_comp g f := F.map_comp f g

@[simp]
theorem Functor.opposite_obj (F : Œ± ‚•§ Œ≤) (A : Œ±·µí·µñ) :
    F.opposite.obj A = op (F.obj A.unop) :=
  rfl

@[simp]
theorem Functor.opposite_map (F : Œ± ‚•§ Œ≤) {A B : Œ±·µí·µñ} (f : A ‚ü∂ B) :
    F.opposite.map f = F.map f :=
  rfl

@[simp]
theorem Functor.opposite_id :
    (ùü≠ Œ±).opposite = ùü≠ Œ±·µí·µñ :=
  rfl

def Op : Cat ‚•§ Cat where
  obj Œ± := Bundled.of Œ±·µí·µñ
  map f := f.opposite
  map_id := rfl
  map_comp _ _ := rfl

end Category
