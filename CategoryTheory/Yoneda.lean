import CategoryTheory.Basic

namespace Category

open Opposite

variable {Œ± Œ≤ Œ≥ Œ¥ : Type _} {A B C D : Œ±}
  [Category Œ±] [Category Œ≤] [Category Œ≥] [Category Œ¥]
  {F : Œ± ‚•§ Type _}

/-- The covariant hom functor. -/
def CoHom (A : Œ±) : Œ± ‚•§ Type _ where
  obj B := A ‚ü∂ B
  map f g := f ‚àò g
  map_id := by aesop
  map_comp := by aesop

@[simp]
theorem coHom_obj : (CoHom A).obj B = (A ‚ü∂ B) := rfl

@[simp]
theorem coHom_map : (CoHom A).map f = fun g => f ‚àò g := rfl

/-- The covariant hom functor. -/
def ContraHom (A : Œ±) : Œ±·µí·µñ ‚•§ Type _ where
  obj B := unop B ‚ü∂ A
  map f g := g ‚àò f
  map_id := by
    intro B
    funext f
    simp
    exact comp_id _
  map_comp := by
    intro B C D g f
    funext h
    simp
    rfl

def Œ¶ (Œ∑ : NatTrans (CoHom A) F) : F.obj A :=
  Œ∑.app A (ùüô A)

def Œ® (x : F.obj A) : NatTrans (CoHom A) F where
  app B f := (F.map f) x
  naturality := by
    intro B C f
    funext g
    simp

@[simp]
theorem Œ¶Œ® (x : F.obj A) : Œ¶ (Œ® x) = x := by
  unfold Œ¶ Œ®
  simp

@[simp]
theorem Œ®Œ¶ (Œ∑ : NatTrans (CoHom A) F) : Œ® (Œ¶ Œ∑) = Œ∑ := by
  ext B
  funext f
  have := congrFun (Œ∑.naturality f) (ùüô A)
  simp at this
  exact this.symm

/-- The Yoneda embedding of a category into its category of presheaves. -/
def Y (Œ± : Type _) [Category Œ±] : Œ± ‚•§ (Œ±·µí·µñ ‚•§ Type _) where
  obj A := CoHom (op A)
  map {A B} f := Œ® f
  map_id := by
    intro A
    refine NatTrans.ext _ _ ?_
    funext B f
    simp
    exact comp_id _
  map_comp := by
    intro A B C g f
    refine NatTrans.ext _ _ ?_
    funext D h
    unfold Œ®
    simp
    rfl

end Category
